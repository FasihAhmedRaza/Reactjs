// Screens and components 

// ./ ->Current directory
// ../ ->to move a directory above

// \
// /React js 


// to break into pieces

// //rafce ,rfce
//  short cut for boiler plate of react js

// Code optimization tips:

// 1. Props ->object 

// it refers to the inputs that are passed into a React component.
//Props are used to pass data from a parent component to a child component.
//Props are passed to components similar to how attributes are passed to HTML elements. 

// we can destructed the props  
// props.name X  -> name

//  e.preventDefault(); is se page reload nhi  hoga 
//  e default function ha 




// ///// Conditional rendering 

//HOOKS


// Three types of hooks

// 1 useState()
// is me ham state ko store kr sakte 
// is se hm states ko managge kr sakte ha (like edit or manipualte )
//E.g:
//const [count, setCount] = useState(0);
//Isme count ek state variable hai, aur setCount usko update karne ka tareeqa.

// 2. useEffect()
// yaha pr woh chez jo ham sab se phele render karwana chahte ha when page is realaod 

// 3. useMemo()
//  advanced chaeze ki ha like 10 ki power hamne 100 krdi ha 
// tu yeh basically is  operations ki liye use hoti 

 //Memoization  - it is storing this inside a cache4 

// value ko again again render nhi krta using cache

// Error1
// toomany render error means |
// we need to  use effect hook ()

//----useEffect()

// The useEffect hook is another essential hook in React. 
// It is used for performing side effects in functional 
// components. Side effects can include things like data
//  fetching, subscriptions, manually changing the DOM, and more.

// sprading operator  = > ...t

//  Using spreading operator
// const array1 = [1, 2, 3];
// const array2 = [4, 5, 6];
// const combinedArray = [...array1, ...array2];

// /Without spreading operator
// const combinedArrayWithoutSpread = array1.concat(array2);

// React Router ---
//npm install react-router-dom localforage match-sorter sort-by

// React Router is a library for client-side routing in React applications. 
// It helps create single-page web apps by defining routes and
//  their corresponding components. When a user navigates to a 
//  specific URL, React Router renders the appropriate component,
//   keeping the UI in sync with the URL


// -----------------   REDUX 

// for example in redux we have 
// we have one store we call as redux store 
 // in which we have many states 
 // and we can customize and update the values of states using actions 
 // and we can excess values using reducers 

//   flow :
 //  Redux Store -> states ,states ,states  - > Actions  -> Reducers 

 //Action reducer ko triggered kre ga 
// Reducer store me se changes kare gaa 

// for display the reducer after the done the changes we can display using useSelector in store

//  dispatch means to send quickly for paticular purposes
// Payload means Data 


